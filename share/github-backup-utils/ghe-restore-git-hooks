#!/usr/bin/env bash
#/ Usage: ghe-restore-git-hooks
#/ Restore custom Git hooks data from an rsync snapshot
#/
#/ Note: This command typically isn't called directly. It's invoked by
#/ ghe-restore.
set -e

# Bring in the backup configuration
# shellcheck source=share/github-backup-utils/ghe-backup-config
. "$( dirname "${BASH_SOURCE[0]}" )/ghe-backup-config"

bm_start "$(basename $0)"

# Perform a host-check and establish GHE_REMOTE_XXX variables.
ghe_remote_version_required "$GHE_HOSTNAME"

# The snapshot to restore should be set by the ghe-restore command but this lets
# us run this script directly.
: ${GHE_RESTORE_SNAPSHOT:=current}

tempdir=$(mktemp -d -t backup-utils-restore-XXXXXX)

if [ $CLUSTER ]; then
  hostnames=$(ghe-cluster-nodes "$GHE_HOSTNAME" "git-server") || hostnames=$GHE_HOSTNAME
else
  hostnames=$GHE_HOSTNAME
fi

cleanup() {
  for pid in $(jobs -p); do
    kill -KILL $pid > /dev/null 2>&1 || true
  done
  rm -rf $tempdir
}
trap 'cleanup' INT TERM EXIT

if [ -d "$GHE_DATA_DIR/$GHE_RESTORE_SNAPSHOT/git-hooks/environments/tarballs" ]; then
  tarballs=$(cd $GHE_DATA_DIR/$GHE_RESTORE_SNAPSHOT/git-hooks/environments/tarballs && find . -type f)
  hostname=$(echo $hostnames | awk '{ print $1; }')

  if [ -n "$hostname" ]; then
    ghe-ssh "$hostname" -- "sudo -u git mkdir -p $GHE_REMOTE_DATA_USER_DIR/git-hooks/environments/tarballs"
    ghe-rsync -avH --delete \
    -e "ghe-ssh" \
    --rsync-path="sudo -u git rsync" \
    "$GHE_DATA_DIR/$GHE_RESTORE_SNAPSHOT/git-hooks/environments/tarballs/" \
    "$hostname:$GHE_REMOTE_DATA_USER_DIR/git-hooks/environments/tarballs" 1>&3

    for tarball in $tarballs; do
      env_id=$(echo $tarball | cut -d '/' -f 2)
      ghe-ssh "$hostname" -- "/bin/bash -c 'export PATH=\$PATH:/usr/local/share/enterprise && ghe-hook-env-update $env_id $GHE_REMOTE_DATA_USER_DIR/git-hooks/environments/tarballs/$tarball'" 1>&3 2>&3
    done
  fi
fi

if [ -d "$GHE_DATA_DIR/$GHE_RESTORE_SNAPSHOT/git-hooks/repos" ]; then
  for hostname in $hostnames; do
    ghe-ssh "$hostname" -- "sudo -u git mkdir -p $GHE_REMOTE_DATA_USER_DIR/git-hooks/repos"
    ghe-rsync -avH --delete \
    -e "ghe-ssh" \
    --rsync-path="sudo -u git rsync" \
    "$GHE_DATA_DIR/$GHE_RESTORE_SNAPSHOT/git-hooks/repos/" \
    "$hostname:$GHE_REMOTE_DATA_USER_DIR/git-hooks/repos" 1>&3 &
  done

  for pid in $(jobs -p); do
    wait $pid
    ret_code=$?
    if [ "$ret_code" != "0" ]; then
      echo "$pid exited $ret_code"
      exit $ret_code
    fi
  done
fi

bm_end "$(basename $0)"

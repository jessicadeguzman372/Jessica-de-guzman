#!/bin/sh
#/ Usage: ghe-restore [-v] [-s <snapshot-id>] [<host>]
#/ Restores a GitHub instance from local backup snapshots. The <host> is the
#/ hostname or IP of the GitHub instance. The <host> may be omitted when
#/ the GHE_RESTORE_HOST config variable is set in backup.config. When a <host>
#/ argument is provided, it always overrides the configured restore host.
#/
#/ Options:
#/   -c                Clean restore. Restores appliance settings and license
#/                     in addition to datastores. This is the default for
#/                     appliances that have not yet been configured but can be
#/                     forced by passing the argument explicitly.
#/   -s <snapshot-id>  Restore from the snapshot with the given id. Available
#/                     snapshots may be listed under the data directory.
#/   -v                Enable verbose output.
#/
#/ Note that the host must be reachable and your SSH key must be setup as
#/ described in the following help article:
#/
#/ <https://enterprise.github.com/help/articles/adding-an-ssh-key-for-shell-access>
set -e

# Bring in the backup configuration.
cd $(dirname "$0")/..
. libexec/ghe-backup-config

# The snapshot directory we're restoring from. This is the 'current' snapshot
# by default but may be overridden with the -s flag. Additional restore scripts
# spawned must abide by this variable as well.
GHE_RESTORE_SNAPSHOT="current"
export GHE_RESTORE_SNAPSHOT

# Parse arguments
clean_restore=false
while true; do
    case "$1" in
        -s)
            GHE_RESTORE_SNAPSHOT="$(basename "$2")"
            shift 2
            ;;
        -c)
            clean_restore=true
            shift
            ;;
        -*)
            echo "Error: invalid argument: '$1'" 1>&2
            exit 1
            ;;
        *)
            break
            ;;
    esac
done

# Grab the host arg
host="${1:-$GHE_RESTORE_HOST}"

# Show usage with no <host>
[ -z "$host" ] && print_usage

# ghe-restore-snapshot-path validates it exists, determines what current is,
# and if there's any problem, exit for us
GHE_RESTORE_SNAPSHOT_PATH="$(ghe-restore-snapshot-path "$GHE_RESTORE_SNAPSHOT_PATH")"
GHE_RESTORE_SNAPSHOT=$(basename "$GHE_RESTORE_SNAPSHOT_PATH")

# Figure out whether to use the tarball or rsync restore strategy based on the
# strategy file written in the snapshot directory.
GHE_BACKUP_STRATEGY=$(cat "$GHE_RESTORE_SNAPSHOT_PATH/strategy")

echo "Starting $GHE_BACKUP_STRATEGY restore of $host from snapshot $GHE_RESTORE_SNAPSHOT"

# Perform a host-check and establish the remote version in GHE_REMOTE_VERSION.
ghe_remote_version_required "$host"

# Figure out if host has ever been configured based on the presence of the
# dna.json file. If not, enable restoring settings and license in addition
# to primary datastores.
if ! $clean_restore &&
   ! ghe-ssh "$host" -- "test -f '$GHE_REMOTE_DATA_DIR/enterprise/dna.json' -o \
                              -f '$GHE_REMOTE_DATA_USER_DIR/common/dna.json'"; then
    clean_restore=true
fi

# Make sure the GitHub appliance is in maintenance mode and all writing
# processes have bled out.
ghe-maintenance-mode-enable "$host"

# Restore settings and license if performing a clean restore.
if $clean_restore; then
    echo "Restoring settings ..."
    ghe-ssh "$host" -- 'ghe-import-settings' < "$GHE_RESTORE_SNAPSHOT_PATH/settings.json" 1>&3

    if [ "$GHE_VERSION_MAJOR" -ge 2 ]; then
        echo "Restoring license ..."
        ghe-ssh "$host" -- 'ghe-import-license' < "$GHE_RESTORE_SNAPSHOT_PATH/enterprise.ghl" 1>&3

        echo "
          sudo ghe-service-ensure-mysql &&
          sudo ghe-service-ensure-elasticsearch
        " | ghe-ssh "$host" -- /bin/sh 1>&3
    fi
fi

echo "Restoring Git repositories ..."
ghe-restore-repositories-${GHE_BACKUP_STRATEGY} "$host" 1>&3

echo "Restoring GitHub Pages ..."
ghe-restore-pages-${GHE_BACKUP_STRATEGY} "$host" 1>&3

echo "Restoring MySQL database ..."
gzip -dc "$GHE_RESTORE_SNAPSHOT_PATH/mysql.sql.gz" | ghe-ssh "$host" -- 'ghe-import-mysql' 1>&3

echo "Restoring Redis database ..."
ghe-ssh "$host" -- 'ghe-import-redis' < "$GHE_RESTORE_SNAPSHOT_PATH/redis.rdb" 1>&3

echo "Restoring SSH authorized keys ..."
ghe-ssh "$host" -- 'ghe-import-authorized-keys' < "$GHE_RESTORE_SNAPSHOT_PATH/authorized-keys.json" 1>&3

echo "Restoring Elasticsearch indices ..."
ghe-restore-es-${GHE_BACKUP_STRATEGY} "$host" 1>&3

# Perform a config run after restoring against v2.x vms. This ensures DB
# migrations are run and v1.x -> v2.x fs adjustments are made.
if [ "$GHE_VERSION_MAJOR" -ge 2 ]; then
    echo "Configuring storage ..."
    ghe-ssh "$host" -- "sudo ghe-config-apply" 1>&3
fi

echo "Restoring SSH host keys ..."
ghe-ssh "$host" -- 'ghe-import-ssh-host-keys' < "$GHE_RESTORE_SNAPSHOT_PATH/ssh-host-keys.tar" 1>&3

echo "Completed restore of $host from snapshot $GHE_RESTORE_SNAPSHOT"
echo "Visit https://$(echo "$host" | cut -f 1 -d :)/setup/settings in a browser to configure the recovered appliance."
